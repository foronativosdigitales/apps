--- START OF FILE deepseek_html_20250605_034904 (1).html ---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ciber-Guardianes: Aventura Digital Segura</title>
    <style>
        /* ==================== ESTILOS GENERALES ==================== */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a4b 50%, #2d1b69 100%);
            min-height: 100vh;
            color: #333;
            overflow-x: auto;
            position: relative;
        }

        /* Animación de fondo cibernético */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);
            background-size: 50px 50px;
            animation: grid-move 10s linear infinite;
            pointer-events: none;
            z-index: -1;
        }

        @keyframes grid-move {
            0% { transform: translate(0, 0); }
            100% { transform: translate(50px, 50px); }
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
            z-index: 1;
        }

        /* ==================== HEADER ==================== */
        .header {
            text-align: center;
            margin-bottom: 30px;
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 255, 255, 0.3);
            border: 2px solid #00ffff;
        }

        .header h1 {
            color: #1a1a4b;
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 255, 255, 0.3);
        }

        .header p {
            color: #4a5568;
            font-size: 1.1rem;
        }

        /* ==================== PANEL DE INFORMACIÓN ==================== */
        .info-panel {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 30px;
        }

        .info-card {
            background: rgba(255, 255, 255, 0.9);
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 255, 255, 0.2);
            text-align: center;
            flex: 1;
            min-width: 150px;
            border: 1px solid #00ffff;
        }

        .info-card h3 {
            color: #1a1a4b;
            margin-bottom: 5px;
        }

        .info-card .value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #2d1b69;
        }

        /* ==================== TABLERO DE JUEGO ==================== */
        .game-board {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 255, 255, 0.4);
            margin-bottom: 30px;
            border: 2px solid #00ffff;
        }

        .cyber-zones {
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .zone {
            text-align: center;
            padding: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 15px;
            color: white;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transform: translateY(0);
            transition: transform 0.3s ease;
            border: 2px solid #00ffff;
        }

        .zone:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 20px rgba(0, 255, 255, 0.5);
        }

        .board-path {
            display: grid;
            grid-template-columns: repeat(12, 1fr);
            gap: 15px;
            margin-top: 20px;
        }

        .cell {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            cursor: pointer;
            position: relative;
            transition: all 0.3s ease;
            border: 3px solid transparent;
            font-size: 0.9rem;
        }

        .cell:hover {
            transform: scale(1.1);
            box-shadow: 0 5px 20px rgba(0, 255, 255, 0.5);
        }

        /* Colores por categoría */
        .cell.contraseñas {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        }

        .cell.privacidad {
            background: linear-gradient(135deg, #4ecdc4, #44bd87);
        }

        .cell.navegacion {
            background: linear-gradient(135deg, #74b9ff, #0984e3);
        }

        .cell.redes-sociales {
            background: linear-gradient(135deg, #fdcb6e, #e17055);
        }
        
        .cell.email-phishing {
            background: linear-gradient(135deg, #a29bfe, #6c5ce7); /* Morado claro a oscuro */
        }

        .cell.gaming-responsable {
            background: linear-gradient(135deg, #ff7675, #d63031); /* Rojo anaranjado a rojo oscuro */
        }

        .cell.special {
            background: linear-gradient(135deg, #ffeaa7, #fab1a0); /* Tarjeta color pastel */
            color: #333;
            border-color: #fbd66e;
        }

        .cell.start-end {
            background: linear-gradient(135deg, #55efc4, #00b894); /* Verde brillante */
            color: #333;
            border-color: #00ff00;
        }

        .cell.active {
            border-color: #00ffff;
            animation: cyber-pulse 1.5s infinite;
        }

        @keyframes cyber-pulse {
            0%, 100% { 
                transform: scale(1); 
                box-shadow: 0 0 10px #00ffff;
            }
            50% { 
                transform: scale(1.05); 
                box-shadow: 0 0 20px #00ffff, 0 0 30px #00ffff;
            }
        }

        .player-token {
            position: absolute;
            top: -10px;
            right: -10px;
            width: 25px;
            height: 25px;
            background: #9b59b6;
            border-radius: 50%;
            border: 3px solid #00ffff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            color: white;
            z-index: 10;
            animation: token-glow 2s infinite alternate;
        }

        @keyframes token-glow {
            0% { box-shadow: 0 0 5px #00ffff; }
            100% { box-shadow: 0 0 15px #00ffff, 0 0 25px #00ffff; }
        }

        /* ==================== MODAL DE PREGUNTAS ==================== */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            padding: 30px;
            border-radius: 20px;
            max-width: 600px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 255, 255, 0.5);
            border: 2px solid #00ffff;
        }

        .question-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .question-category {
            display: inline-block;
            padding: 8px 20px;
            border-radius: 20px;
            color: white;
            font-weight: bold;
            margin-bottom: 15px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            /* Categorias de color dinámicas */
        }
        .question-category.contraseñas { background: #ee5a24; }
        .question-category.privacidad { background: #44bd87; }
        .question-category.navegacion { background: #0984e3; }
        .question-category.redes-sociales { background: #e17055; }
        .question-category.email-phishing { background: #6c5ce7; }
        .question-category.gaming-responsable { background: #d63031; }

        .question-text {
            font-size: 1.2rem;
            margin-bottom: 25px;
            line-height: 1.6;
            text-align: center;
            color: #1a1a4b;
        }

        .answers {
            display: grid;
            gap: 15px;
        }

        .answer-btn {
            padding: 15px 20px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
            text-align: left;
            color: #1a1a4b;
        }

        .answer-btn:hover {
            border-color: #00ffff;
            background: #f0f8ff;
            transform: translateX(5px);
            box-shadow: 0 3px 10px rgba(0, 255, 255, 0.3);
        }

        .answer-btn.correct {
            background: #48bb78;
            color: white;
            border-color: #48bb78;
        }

        .answer-btn.incorrect {
            background: #f56565;
            color: white;
            border-color: #f56565;
        }

        /* ==================== ELEMENTOS INTERACTIVOS ==================== */
        .scenario-viewer {
            background: #f7fafc;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
            border: 2px solid #00ffff;
        }

        .scenario-content {
            font-size: 1.1rem;
            line-height: 1.6;
            color: #1a1a4b;
            margin-bottom: 15px;
        }

        .scenario-tip {
            background: rgba(0, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #00ffff;
            margin-top: 15px;
            font-weight: bold;
            color: #008080;
        }

        /* ==================== LEYENDA ==================== */
        .legend {
            display: flex;
            justify-content: center;
            gap: 30px;
            flex-wrap: wrap;
            margin-top: 20px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 5px;
            border: 1px solid #00ffff;
        }
        /* Colores de leyenda */
        .legend-color.contraseñas { background: #ee5a24; }
        .legend-color.privacidad { background: #44bd87; }
        .legend-color.navegacion { background: #0984e3; }
        .legend-color.redes-sociales { background: #e17055; }
        .legend-color.email-phishing { background: #6c5ce7; }
        .legend-color.gaming-responsable { background: #d63031; }
        .legend-color.special { background: #fab1a0; }
        .legend-color.start-end { background: #00b894; }


        /* ==================== CONTROLES ==================== */
        .controls {
            text-align: center;
            margin-top: 30px;
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 0 10px;
            border: 2px solid transparent;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: #00ffff;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #5a6fd8, #6b42a1);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 255, 0.4);
        }

        .btn-secondary {
            background: #e2e8f0;
            color: #1a1a4b;
            border-color: #00ffff;
        }

        .btn-secondary:hover {
            background: #cbd5e0;
            box-shadow: 0 3px 10px rgba(0, 255, 255, 0.3);
        }

        /* ==================== RESPONSIVE DESIGN ==================== */
        @media (max-width: 768px) {
            .cyber-zones {
                grid-template-columns: repeat(3, 1fr);
                gap: 10px;
            }

            .board-path {
                grid-template-columns: repeat(8, 1fr);
                gap: 10px;
            }

            .cell {
                width: 45px;
                height: 45px;
                font-size: 0.8rem;
            }

            .header h1 {
                font-size: 2rem;
            }

            .info-panel {
                flex-direction: column;
            }

            .legend {
                flex-direction: column;
                align-items: center;
                gap: 15px;
            }

            .modal-content {
                padding: 20px;
                margin: 20px;
            }
        }

        @media (max-width: 480px) {
            .cyber-zones {
                grid-template-columns: repeat(2, 1fr);
            }

            .board-path {
                grid-template-columns: repeat(6, 1fr);
            }

            .cell {
                width: 40px;
                height: 40px;
                font-size: 0.7rem;
            }
        }

        /* ==================== EFECTOS ESPECIALES ==================== */
        .security-level {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 15px;
            font-size: 0.9rem;
            font-weight: bold;
            margin-left: 10px;
        }

        .level-novato { background: #48bb78; color: white; }
        .level-aprendiz { background: #ed8936; color: white; }
        .level-experto { background: #e53e3e; color: white; }
        .level-guardian { background: #9b59b6; color: white; } /* Color para nivel Guardián */

        .cyber-warning {
            background: rgba(255, 107, 107, 0.1);
            border: 2px solid #ff6b6b;
            border-radius: 10px;
            padding: 15px;
            margin: 15px 0;
            color: #c53030;
            font-weight: bold;
        }

        .cyber-tip {
            background: rgba(72, 187, 120, 0.1);
            border: 2px solid #48bb78;
            border-radius: 10px;
            padding: 15px;
            margin: 15px 0;
            color: #2f855a;
            font-weight: bold;
        }

        /* Nuevos estilos para funcionalidad */
        .instructions-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .instructions-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            padding: 30px;
            border-radius: 20px;
            max-width: 600px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 255, 255, 0.5);
            border: 2px solid #00ffff;
        }

        .close-btn {
            position: absolute;
            top: 15px;
            right: 15px;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #1a1a4b;
        }

        .explanation {
            background: rgba(0, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-top: 15px;
            border-left: 4px solid #00ffff;
            display: none;
            color: #008080;
            font-weight: bold;
        }

        .level-up {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.95);
            padding: 15px 30px;
            border-radius: 50px;
            box-shadow: 0 5px 20px rgba(0, 255, 255, 0.5);
            border: 2px solid #00ffff;
            z-index: 1001;
            display: none;
            animation: level-up-anim 2s forwards;
            color: #1a1a4b;
            font-weight: bold;
        }

        @keyframes level-up-anim {
            0% { top: -50px; opacity: 0; }
            20% { top: 20px; opacity: 1; }
            80% { top: 20px; opacity: 1; }
            100% { top: -50px; opacity: 0; }
        }

        /* Nuevos estilos para el dado y tarjetas */
        .dice-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 20px;
        }

        .dice {
            width: 80px;
            height: 80px;
            background: white;
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            font-weight: bold;
            margin: 10px 0;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            border: 3px solid #00ffff;
            color: #2d1b69;
        }

        .dice-btn {
            padding: 10px 25px;
            background: linear-gradient(135deg, #fdcb6e, #e17055);
            color: white;
            border: none;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 10px;
        }

        .dice-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 255, 0.4);
        }

        .dice-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .card-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .card-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            padding: 30px;
            border-radius: 20px;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 255, 255, 0.5);
            border: 2px solid #00ffff;
            text-align: center;
        }

        .card-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: #1a1a4b;
        }

        .card-effect {
            font-size: 1.2rem;
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 10px;
        }

        .bonus-card {
            background: rgba(72, 187, 120, 0.2);
            border: 2px solid #48bb78;
            color: #2f855a;
        }

        .penalty-card {
            background: rgba(245, 101, 101, 0.2);
            border: 2px solid #f56565;
            color: #c53030;
        }

        .card-close-btn {
            padding: 10px 25px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .card-close-btn:hover {
            background: #5a6fd8;
        }
        
        .game-over-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }
        .game-over-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            padding: 30px;
            border-radius: 20px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 255, 255, 0.5);
            border: 2px solid #00ffff;
            text-align: center;
        }
        .game-over-content h2 {
            font-size: 2rem;
            color: #1a1a4b;
            margin-bottom: 15px;
        }
        .game-over-content p {
            font-size: 1.1rem;
            color: #4a5568;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🛡️ CIBER-GUARDIANES 🛡️</h1>
            <p>Aventura por el mundo digital seguro - ¡Aprende a protegerte online!</p>
        </div>

        <!-- Panel de información -->
        <div class="info-panel">
            <div class="info-card">
                <h3>👤 Guardián</h3>
                <div class="value" id="player-name">Ciber-Héroe</div>
            </div>
            <div class="info-card">
                <h3>📍 Posición</h3>
                <div class="value" id="player-position">1</div>
            </div>
            <div class="info-card">
                <h3>🏆 Puntos</h3>
                <div class="value" id="player-score">0</div>
            </div>
            <div class="info-card">
                <h3>🛡️ Nivel</h3>
                <div class="value" id="security-level">Novato</div>
            </div>
        </div>

        <!-- Tablero de juego -->
        <div class="game-board">
            <!-- Contenedor del dado -->
            <div class="dice-container" id="dice-container">
                <div class="dice" id="dice">?</div>
                <button class="dice-btn" id="roll-dice-btn" disabled>🎲 Lanzar Dado</button>
            </div>

            <!-- Zonas cibernéticas (solo visuales, no casillas del tablero) -->
            <div class="cyber-zones">
                <div class="zone">🔐 Contraseñas<br>Seguras</div>
                <div class="zone">👥 Privacidad<br>Personal</div>
                <div class="zone">🌐 Navegación<br>Segura</div>
                <div class="zone">📱 Redes<br>Sociales</div>
                <div class="zone">📧 Email &<br>Phishing</div>
                <div class="zone">🎮 Gaming<br>Responsable</div>
            </div>

            <!-- Tablero de casillas -->
            <div class="board-path" id="game-path">
                <!-- Las casillas se generarán dinámicamente con JavaScript -->
            </div>

            <!-- Leyenda -->
            <div class="legend">
                <div class="legend-item">
                    <div class="legend-color contraseñas"></div>
                    <span>🔐 Contraseñas</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color privacidad"></div>
                    <span>👥 Privacidad</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color navegacion"></div>
                    <span>🌐 Navegación</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color redes-sociales"></div>
                    <span>📱 Redes Sociales</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color email-phishing"></div>
                    <span>📧 Email & Phishing</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color gaming-responsable"></div>
                    <span>🎮 Gaming Responsable</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color special"></div>
                    <span>⭐ Casilla Especial</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color start-end"></div>
                    <span>🏁 Inicio/Meta</span>
                </div>
            </div>
        </div>

        <!-- Controles -->
        <div class="controls">
            <button class="btn btn-primary" id="start-btn">🚀 Iniciar Misión</button>
            <button class="btn btn-secondary" id="reset-btn">🔄 Reiniciar</button>
            <button class="btn btn-secondary" id="instructions-btn">❓ Manual del Guardián</button>
        </div>
    </div>

    <!-- Modal para preguntas -->
    <div id="question-modal" class="modal">
        <div class="modal-content">
            <button class="close-btn" id="close-question-modal" style="display:none;">×</button>
            <div class="question-header">
                <div id="question-category" class="question-category"></div>
                <div id="question-zone"></div>
            </div>
            <div id="question-text" class="question-text"></div>
            <div id="scenario-section" class="scenario-viewer" style="display: none;">
                <div id="scenario-content" class="scenario-content"></div>
                <div class="scenario-tip">
                    💡 <strong>Piensa bien:</strong> ¿Cuál sería la acción más segura?
                </div>
            </div>
            <div id="answers" class="answers"></div>
            <div id="explanation" class="explanation"></div>
        </div>
    </div>

    <!-- Modal de instrucciones -->
    <div id="instructions-modal" class="instructions-modal">
        <div class="instructions-content">
            <button class="close-btn" id="close-instructions-modal">×</button>
            <h2 style="text-align: center; margin-bottom: 20px; color: #1a1a4b;">📜 Manual del Guardián</h2>
            <div style="margin-bottom: 15px;">
                <h3>🎯 Objetivo del juego</h3>
                <p>Recorre el tablero respondiendo preguntas sobre seguridad digital para convertirte en un auténtico Ciber-Guardián. ¡Alcanza la meta con la máxima puntuación!</p>
            </div>
            <div style="margin-bottom: 15px;">
                <h3>📝 Cómo jugar</h3>
                <ol>
                    <li>Haz clic en "Iniciar Misión" para comenzar la aventura.</li>
                    <li>Lanza el dado para avanzar en el tablero.</li>
                    <li>Cada casilla te presentará una pregunta de seguridad digital. Responde correctamente para ganar puntos.</li>
                    <li>Algunas casillas son especiales (⭐): pueden darte una recompensa o un castigo.</li>
                    <li>Alcanza el nivel "Guardián" y llega a la casilla final para completar tu misión.</li>
                </ol>
            </div>
            <div>
                <h3>🏆 Sistema de puntos y niveles</h3>
                <ul>
                    <li>Respuesta correcta: +5 puntos (pueden ser más con tarjetas de bonus)</li>
                    <li>Respuesta incorrecta: +0 puntos, pero ¡oportunidad de aprender!</li>
                    <li>Niveles de seguridad: 
                        <ul>
                            <li>Novato: 0-10 puntos</li>
                            <li>Aprendiz: 11-25 puntos</li>
                            <li>Experto: 26-40 puntos</li>
                            <li>Guardián: 41+ puntos</li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="cyber-tip" style="margin-top: 20px;">
                💡 ¡Cada pregunta es una oportunidad para aprender a protegerte en el mundo digital!
            </div>
        </div>
    </div>

    <!-- Modal de tarjetas -->
    <div id="card-modal" class="card-modal">
        <div class="card-content">
            <h2 class="card-title" id="card-title">¡Tarjeta Especial!</h2>
            <div class="card-effect" id="card-effect">
                Has encontrado una tarjeta especial con efectos en tu juego.
            </div>
            <button class="card-close-btn" id="card-close-btn">Continuar</button>
        </div>
    </div>

    <!-- Notificación de nivel -->
    <div id="level-up" class="level-up">
        ¡Felicidades! Has alcanzado el nivel: <span id="new-level">Experto</span>
    </div>

    <!-- Modal de juego terminado -->
    <div id="game-over-modal" class="game-over-modal">
        <div class="game-over-content">
            <h2 id="game-over-title">¡Misión Completada!</h2>
            <p id="game-over-message">Has llegado al final del tablero. ¡Felicidades, Ciber-Guardián!</p>
            <p>Puntos finales: <span id="final-score">0</span></p>
            <p>Nivel alcanzado: <span id="final-level">Novato</span></p>
            <button class="btn btn-primary" id="restart-game-btn">Volver a Jugar</button>
        </div>
    </div>

    <script>
        // ==================== VARIABLES GLOBALES ====================
        let gameState = {
            playerPosition: 1,
            playerScore: 0,
            questionsAnswered: 0,
            gameActive: false,
            currentQuestion: null,
            securityLevel: 'Novato',
            diceRolled: false,
            diceValue: 0,
            nextBonus: 1, // Multiplicador de puntos para la próxima respuesta
            autoCorrect: false, // Si la próxima respuesta es automáticamente correcta
            skipTurn: false, // Si el jugador pierde el próximo turno
            playerToken: null, // Referencia al elemento del token del jugador
            boardPathConfig: [] // Configuración del tablero
        };

        const MAX_BOARD_POSITION = 60; // Número total de casillas en el tablero

        // Tarjetas especiales (recompensas y castigos)
        const specialCards = {
            rewards: [
                { 
                    title: "¡Bonus x2!", 
                    effect: "Tu próxima respuesta correcta te dará el doble de puntos", 
                    type: "bonus",
                    action: function() {
                        gameState.nextBonus = 2;
                    }
                },
                { 
                    title: "¡Bonus x3!", 
                    effect: "Tu próxima respuesta correcta te dará el triple de puntos", 
                    type: "bonus",
                    action: function() {
                        gameState.nextBonus = 3;
                    }
                },
                { 
                    title: "¡Avance Rápido!", 
                    effect: "¡Avanzas 5 casillas adicionales!", 
                    type: "bonus",
                    action: function() {
                        setTimeout(() => movePlayer(Math.min(gameState.playerPosition + 5, MAX_BOARD_POSITION)), 1000);
                    }
                },
                { 
                    title: "¡Respuesta Segura!", 
                    effect: "Tu próxima pregunta se considera correcta automáticamente", 
                    type: "bonus",
                    action: function() {
                        gameState.autoCorrect = true;
                    }
                }
            ],
            penalties: [
                { 
                    title: "¡Virus Detectado!", 
                    effect: "Retrocedes 3 casillas", 
                    type: "penalty",
                    action: function() {
                        setTimeout(() => movePlayer(Math.max(gameState.playerPosition - 3, 1)), 1000);
                    }
                },
                { 
                    title: "¡Reinicio del Sistema!", 
                    effect: "¡Vuelves a la casilla de inicio!", 
                    type: "penalty",
                    action: function() {
                        setTimeout(() => movePlayer(1), 1000);
                    }
                },
                { 
                    title: "¡Pérdida de Datos!", 
                    effect: "Pierdes 5 puntos", 
                    type: "penalty",
                    action: function() {
                        gameState.playerScore = Math.max(gameState.playerScore - 5, 0);
                        updatePlayerInfo();
                    }
                },
                { 
                    title: "¡Bloqueo Temporal!", 
                    effect: "Pierdes tu próximo turno", 
                    type: "penalty",
                    action: function() {
                        gameState.skipTurn = true;
                    }
                }
            ]
        };

        // ==================== BASE DE DATOS DE PREGUNTAS ====================
        const questionDatabase = {
            // CONTRASEÑAS SEGURAS (Rojo)
            contraseñas: [
                {
                    zone: "Contraseñas Seguras",
                    question: "¿Cuál de estas contraseñas es MÁS segura?",
                    options: ["123456", "MiNombre2024", "P@ssw0rd!2024#Segura", "password"],
                    correct: 2,
                    explanation: "Una contraseña segura debe tener al menos 12 caracteres, mayúsculas, minúsculas, números y símbolos.",
                    level: "beginner"
                },
                {
                    zone: "Contraseñas Seguras",
                    question: "¿Qué debes hacer si sospechas que alguien sabe tu contraseña?",
                    options: ["Ignorarlo, no pasa nada", "Cambiarla inmediatamente", "Contárselo a mis amigos", "Usar la misma en más sitios"],
                    correct: 1,
                    explanation: "Si crees que tu contraseña está comprometida, cámbiala de inmediato para proteger tus cuentas.",
                    level: "beginner"
                },
                {
                    zone: "Contraseñas Seguras",
                    question: "¿Es seguro usar la misma contraseña para todas mis cuentas?",
                    options: ["Sí, es más fácil recordarla", "No, si la descubren acceden a todo", "Solo para redes sociales", "Depende de la contraseña"],
                    correct: 1,
                    explanation: "Usar la misma contraseña en múltiples sitios es muy peligroso. Si la descubren, tendrán acceso a todas tus cuentas.",
                    level: "intermediate"
                },
                {
                    zone: "Contraseñas Seguras",
                    question: "¿Qué es un gestor de contraseñas?",
                    options: ["Un juego de ordenador", "Un programa que guarda contraseñas de forma segura", "Una red social", "Un tipo de virus"],
                    correct: 1,
                    explanation: "Un gestor de contraseñas almacena todas tus contraseñas de forma segura y te ayuda a crear contraseñas únicas.",
                    level: "intermediate"
                },
                {
                    zone: "Contraseñas Seguras",
                    question: "¿Qué es la autenticación de dos factores (2FA)?",
                    options: ["Poner dos contraseñas iguales", "Confirmar tu identidad con un segundo método", "Compartir tu contraseña con dos personas", "Un error en el login"],
                    correct: 1,
                    explanation: "La 2FA añade una capa extra de seguridad, como un código enviado a tu móvil, para verificar tu identidad.",
                    level: "advanced"
                }
            ],

            // PRIVACIDAD PERSONAL (Verde)  
            privacidad: [
                {
                    zone: "Privacidad Personal",
                    question: "¿Qué información personal NO deberías compartir online con desconocidos?",
                    options: ["Tu color favorito", "Tu dirección de casa y teléfono", "Tu comida preferida", "Tu serie favorita"],
                    correct: 1,
                    explanation: "Nunca compartas información personal sensible como tu dirección, teléfono, o dónde estudias con personas que no conoces.",
                    level: "beginner"
                },
                {
                    zone: "Privacidad Personal",
                    question: "Si alguien que no conoces te pide tu número de teléfono en internet, ¿qué haces?",
                    options: ["Se lo doy si parece simpático", "No se lo doy y se lo cuento a un adulto de confianza", "Le doy un número falso", "Le pido el suyo primero"],
                    correct: 1,
                    explanation: "Nunca des tu información personal a desconocidos online. Siempre habla con un adulto de confianza si te sientes incómodo.",
                    level: "beginner",
                    scenario: "Un chico que dice tener tu edad te escribe por primera vez en un juego online y te pide tu número para 'ser mejores amigos' y 'jugar más fácil'."
                },
                {
                    zone: "Privacidad Personal",
                    question: "¿Qué son los datos personales?",
                    options: ["Solo mi nombre completo", "Cualquier información que te identifica como persona", "Solo mis fotos y vídeos", "Solo mi edad y fecha de nacimiento"],
                    correct: 1,
                    explanation: "Los datos personales incluyen tu nombre, dirección, teléfono, fotos, ubicación, preferencias y cualquier información que te identifique directa o indirectamente.",
                    level: "intermediate"
                },
                {
                    zone: "Privacidad Personal",
                    question: "¿Por qué es importante revisar la configuración de privacidad de las aplicaciones y redes sociales?",
                    options: ["No es importante, ya vienen configuradas", "Para controlar qué información tuya es visible y compartida", "Solo si soy mayor de edad", "Para ganar puntos en el juego"],
                    correct: 1,
                    explanation: "La configuración de privacidad te permite controlar quién puede ver tu información, tus publicaciones y cómo las aplicaciones usan tus datos.",
                    level: "intermediate"
                }
            ],

            // NAVEGACIÓN SEGURA (Azul)
            navegacion: [
                {
                    zone: "Navegación Segura",
                    question: "¿Cómo puedes saber si una página web es segura para introducir datos sensibles (como una contraseña)?",
                    options: ["Si es bonita y tiene muchas fotos", "Si tiene un candado 🔒 y la dirección empieza por 'https://'", "Si es popular entre mis amigos", "Si me pide instalar algo"],
                    correct: 1,
                    explanation: "El 'https://' y el icono del candado indican que la conexión es segura y tus datos viajan cifrados.",
                    level: "beginner"
                },
                {
                    zone: "Navegación Segura",
                    question: "Si un pop-up (ventana emergente) aparece diciendo que tu ordenador tiene un virus y te pide descargar un programa, ¿qué debes hacer?",
                    options: ["Descargarlo inmediatamente para arreglarlo", "Cerrar la ventana y no hacer clic en nada", "Compartirlo con mis amigos para que lo vean", "Reiniciar el ordenador a la fuerza"],
                    correct: 1,
                    explanation: "Estos pop-ups suelen ser estafas. Nunca descargues nada ni hagas clic en ellos. Cierra la ventana y, si tienes dudas, consulta con un adulto.",
                    level: "beginner"
                },
                {
                    zone: "Navegación Segura",
                    question: "¿Qué es el 'phishing'?",
                    options: ["Un juego de pescar online", "Un tipo de estafa para obtener información personal haciéndose pasar por alguien de confianza", "Un tipo de pescado", "Una forma de navegar por internet"],
                    correct: 1,
                    explanation: "El phishing es una técnica de estafa donde los ciberdelincuentes se hacen pasar por entidades legítimas para robar tu información personal.",
                    level: "intermediate"
                },
                {
                    zone: "Navegación Segura",
                    question: "¿Qué información NO es seguro introducir en una Wi-Fi pública sin protección (sin contraseña, abierta)?",
                    options: ["Navegar por noticias", "Enviar mensajes a amigos", "Revisar mis redes sociales", "Realizar compras online o acceder a mi banco"],
                    correct: 3,
                    explanation: "Las redes Wi-Fi públicas pueden no ser seguras. Evita introducir contraseñas, datos bancarios o cualquier información sensible, ya que podría ser interceptada.",
                    level: "advanced"
                }
            ],

            // REDES SOCIALES (Naranja)
            redes_sociales: [
                {
                    zone: "Redes Sociales",
                    question: "¿Quién debería poder ver tus fotos y publicaciones en redes sociales?",
                    options: ["Todo el mundo", "Solo mis amigos y familiares cercanos", "Solo gente que me sigue", "Cualquiera que me solicite"],
                    correct: 1,
                    explanation: "Es recomendable configurar la privacidad de tus redes sociales para que solo tus amigos o un grupo selecto de personas puedan ver tu contenido.",
                    level: "beginner"
                },
                {
                    zone: "Redes Sociales",
                    question: "Si alguien te envía un mensaje hiriente o acosador en una red social, ¿qué haces?",
                    options: ["Le devuelvo el mensaje igual de hiriente", "Lo ignoro y espero que pare", "Lo bloqueo, lo reporto y se lo cuento a un adulto", "Se lo enseño a mis amigos para reírnos"],
                    correct: 2,
                    explanation: "Nunca respondas al acoso. Bloquea a la persona, reporta el incidente a la plataforma y busca ayuda de un adulto de confianza.",
                    level: "beginner"
                },
                {
                    zone: "Redes Sociales",
                    question: "¿Por qué NO deberías aceptar solicitudes de amistad de desconocidos en redes sociales?",
                    options: ["Porque no tendrían muchos amigos", "Porque podrían ser personas malintencionadas o perfiles falsos", "Porque ya tengo muchos amigos", "No pasa nada por aceptarlos"],
                    correct: 1,
                    explanation: "Aceptar a desconocidos te expone a riesgos como el ciberacoso, la suplantación de identidad o el acceso a tu información personal.",
                    level: "intermediate"
                },
                {
                    zone: "Redes Sociales",
                    question: "¿Qué tipo de contenido NO deberías compartir en redes sociales, incluso con tus amigos?",
                    options: ["Fotos de tus mascotas", "Tu ubicación exacta en tiempo real o planes de viaje detallados", "Dibujos que hayas hecho", "Recomendaciones de películas"],
                    correct: 1,
                    explanation: "Compartir tu ubicación o planes detallados puede poner en riesgo tu seguridad física y la de tu hogar.",
                    level: "advanced"
                }
            ],
            // EMAIL & PHISHING (Morado)
            email_phishing: [
                {
                    zone: "Email & Phishing",
                    question: "Recibes un correo electrónico de un 'banco' que te pide tu contraseña y número de cuenta para 'verificar'. ¿Qué haces?",
                    options: ["Se los doy rápidamente para evitar problemas", "Ignoro el correo, es una estafa", "Respondo preguntando si es real", "Busco el banco en Google para verificarlo"],
                    correct: 1,
                    explanation: "Los bancos y empresas legítimas nunca te pedirán contraseñas o datos sensibles por correo electrónico. Es un intento de phishing.",
                    level: "beginner"
                },
                {
                    zone: "Email & Phishing",
                    question: "¿Cómo identificas un correo de phishing?",
                    options: ["Tiene muchos colores", "Contiene errores ortográficos, remitente sospechoso, enlaces extraños, o peticiones urgentes de datos", "Tiene emojis", "Es muy corto"],
                    correct: 1,
                    explanation: "Busca señales como errores gramaticales, direcciones de email extrañas, enlaces sospechosos o solicitudes de información personal urgentes.",
                    level: "intermediate"
                },
                {
                    zone: "Email & Phishing",
                    question: "Si recibes un email con un archivo adjunto de alguien que no conoces, ¿qué debes hacer?",
                    options: ["Abrirlo para ver de qué se trata", "Reenviárselo a todos mis contactos", "Eliminarlo sin abrirlo", "Hacer clic en todos los enlaces del correo"],
                    correct: 2,
                    explanation: "Los archivos adjuntos de remitentes desconocidos pueden contener virus o malware. Es mejor eliminarlos sin abrirlos.",
                    level: "beginner"
                },
                {
                    zone: "Email & Phishing",
                    question: "Un email promete un premio increíble si haces clic en un enlace y rellenas tus datos personales. ¿Es seguro?",
                    options: ["Sí, ¡es mi día de suerte!", "No, es una trampa para robar mis datos", "Solo si el premio es muy grande", "Depende del diseño del email"],
                    correct: 1,
                    explanation: "Las ofertas 'demasiado buenas para ser verdad' suelen ser estafas. Nunca hagas clic en enlaces sospechosos ni proporciones datos personales.",
                    level: "advanced"
                }
            ],
            // GAMING RESPONSABLE (Rojo oscuro)
            gaming_responsable: [
                {
                    zone: "Gaming Responsable",
                    question: "¿Por qué es importante tener cuidado al hablar con desconocidos en juegos online?",
                    options: ["Pueden ser aburridos", "Pueden no ser quienes dicen ser y pedir información personal o intentar engañarte", "Para que no te ganen en el juego", "Para no hacerte amigos"],
                    correct: 1,
                    explanation: "Los desconocidos en línea pueden tener intenciones maliciosas o no ser de la edad que dicen. Nunca compartas información personal.",
                    level: "beginner"
                },
                {
                    zone: "Gaming Responsable",
                    question: "Si un jugador te molesta o te acosa en un juego online, ¿qué deberías hacer?",
                    options: ["Insultarle de vuelta", "Abandonar el juego y no volver a jugar", "Bloquearlo, reportarlo al juego y contárselo a un adulto", "Aceptar sus disculpas si las pide"],
                    correct: 2,
                    explanation: "Bloquear y reportar es crucial. Siempre informa a un adulto si alguien te hace sentir incómodo o inseguro en línea.",
                    level: "intermediate"
                },
                {
                    zone: "Gaming Responsable",
                    question: "¿Por qué NO deberías compartir tu nombre real, edad o ubicación en un chat de juego público?",
                    options: ["Para mantener el anonimato", "Para evitar que extraños te identifiquen o te localicen en la vida real", "Porque es aburrido", "Para que no sepan quién soy"],
                    correct: 1,
                    explanation: "Compartir detalles personales te expone a riesgos de ciberacoso, suplantación de identidad o incluso peligros físicos.",
                    level: "beginner"
                },
                {
                    zone: "Gaming Responsable",
                    question: "¿Qué es una microtransacción en un juego y qué precaución deberías tener?",
                    options: ["Comprar algo muy pequeño en el juego, no tener ninguna precaución", "Comprar elementos virtuales con dinero real; pedir permiso a un adulto antes de hacer cualquier compra", "Una transacción que dura poco tiempo, usar la tarjeta de crédito de cualquiera", "Intercambiar objetos con otros jugadores, no hay problema"],
                    correct: 1,
                    explanation: "Las microtransacciones son compras dentro del juego con dinero real. Siempre pide permiso a un adulto antes de gastar dinero para evitar sorpresas en la factura.",
                    level: "advanced"
                }
            ]
        };

        // Mapeo de categorías a clases CSS para colores
        const categoryClassMap = {
            'contraseñas': 'contraseñas',
            'privacidad': 'privacidad',
            'navegacion': 'navegacion',
            'redes_sociales': 'redes-sociales',
            'email_phishing': 'email-phishing',
            'gaming_responsable': 'gaming-responsable',
            'special': 'special', // Para casillas especiales
            'start-end': 'start-end' // Para inicio y fin
        };

        // Configuración del tablero: define el tipo de cada casilla
        // 'start-end': Inicio/Fin
        // 'special': Casilla de tarjeta especial (recompensa o castigo)
        // Las demás son categorías de preguntas
        gameState.boardPathConfig = [
            { type: 'start-end', label: 'Inicio' }, // 1
            { type: 'contraseñas', label: '1' }, // 2
            { type: 'privacidad', label: '2' }, // 3
            { type: 'special', label: '⭐' }, // 4
            { type: 'navegacion', label: '3' }, // 5
            { type: 'redes_sociales', label: '4' }, // 6
            { type: 'email_phishing', label: '5' }, // 7
            { type: 'contraseñas', label: '6' }, // 8
            { type: 'special', label: '⭐' }, // 9
            { type: 'gaming_responsable', label: '7' }, // 10
            { type: 'privacidad', label: '8' }, // 11
            { type: 'navegacion', label: '9' }, // 12
            { type: 'redes_sociales', label: '10' }, // 13
            { type: 'contraseñas', label: '11' }, // 14
            { type: 'special', label: '⭐' }, // 15
            { type: 'email_phishing', label: '12' }, // 16
            { type: 'privacidad', label: '13' }, // 17
            { type: 'gaming_responsable', label: '14' }, // 18
            { type: 'navegacion', label: '15' }, // 19
            { type: 'redes_sociales', label: '16' }, // 20
            { type: 'special', label: '⭐' }, // 21
            { type: 'contraseñas', label: '17' }, // 22
            { type: 'privacidad', label: '18' }, // 23
            { type: 'email_phishing', label: '19' }, // 24
            { type: 'gaming_responsable', label: '20' }, // 25
            { type: 'navegacion', label: '21' }, // 26
            { type: 'special', label: '⭐' }, // 27
            { type: 'redes_sociales', label: '22' }, // 28
            { type: 'contraseñas', label: '23' }, // 29
            { type: 'privacidad', label: '24' }, // 30
            { type: 'email_phishing', label: '25' }, // 31
            { type: 'gaming_responsable', label: '26' }, // 32
            { type: 'special', label: '⭐' }, // 33
            { type: 'navegacion', label: '27' }, // 34
            { type: 'redes_sociales', label: '28' }, // 35
            { type: 'contraseñas', label: '29' }, // 36
            { type: 'privacidad', label: '30' }, // 37
            { type: 'email_phishing', label: '31' }, // 38
            { type: 'special', label: '⭐' }, // 39
            { type: 'gaming_responsable', label: '32' }, // 40
            { type: 'navegacion', label: '33' }, // 41
            { type: 'redes_sociales', label: '34' }, // 42
            { type: 'contraseñas', label: '35' }, // 43
            { type: 'privacidad', label: '36' }, // 44
            { type: 'special', label: '⭐' }, // 45
            { type: 'email_phishing', label: '37' }, // 46
            { type: 'gaming_responsable', label: '38' }, // 47
            { type: 'navegacion', label: '39' }, // 48
            { type: 'redes_sociales', label: '40' }, // 49
            { type: 'special', label: '⭐' }, // 50
            { type: 'contraseñas', label: '41' }, // 51
            { type: 'privacidad', label: '42' }, // 52
            { type: 'email_phishing', label: '43' }, // 53
            { type: 'gaming_responsable', label: '44' }, // 54
            { type: 'navegacion', label: '45' }, // 55
            { type: 'special', label: '⭐' }, // 56
            { type: 'redes_sociales', label: '46' }, // 57
            { type: 'contraseñas', label: '47' }, // 58
            { type: 'privacidad', label: '48' }, // 59
            { type: 'start-end', label: 'Meta' } // 60
        ];


        // ==================== REFERENCIAS DOM ====================
        const playerPositionEl = document.getElementById('player-position');
        const playerScoreEl = document.getElementById('player-score');
        const securityLevelEl = document.getElementById('security-level');
        const gamePathEl = document.getElementById('game-path');
        const diceEl = document.getElementById('dice');
        const rollDiceBtn = document.getElementById('roll-dice-btn');
        const startBtn = document.getElementById('start-btn');
        const resetBtn = document.getElementById('reset-btn');
        const instructionsBtn = document.getElementById('instructions-btn');
        const questionModal = document.getElementById('question-modal');
        const questionCategoryEl = document.getElementById('question-category');
        const questionZoneEl = document.getElementById('question-zone');
        const questionTextEl = document.getElementById('question-text');
        const answersEl = document.getElementById('answers');
        const explanationEl = document.getElementById('explanation');
        const closeQuestionModalBtn = document.getElementById('close-question-modal');
        const instructionsModal = document.getElementById('instructions-modal');
        const closeInstructionsModalBtn = document.getElementById('close-instructions-modal');
        const levelUpNotification = document.getElementById('level-up');
        const newLevelSpan = document.getElementById('new-level');
        const scenarioSection = document.getElementById('scenario-section');
        const scenarioContent = document.getElementById('scenario-content');
        const cardModal = document.getElementById('card-modal');
        const cardTitleEl = document.getElementById('card-title');
        const cardEffectEl = document.getElementById('card-effect');
        const cardCloseBtn = document.getElementById('card-close-btn');
        const gameOverModal = document.getElementById('game-over-modal');
        const gameOverTitle = document.getElementById('game-over-title');
        const gameOverMessage = document.getElementById('game-over-message');
        const finalScoreSpan = document.getElementById('final-score');
        const finalLevelSpan = document.getElementById('final-level');
        const restartGameBtn = document.getElementById('restart-game-btn');


        // ==================== FUNCIONES PRINCIPALES ====================

        /**
         * Inicializa el juego, resetea el estado y genera el tablero.
         */
        function initGame() {
            resetGame();
            gameState.gameActive = true;
            rollDiceBtn.disabled = false;
            startBtn.disabled = true;
            generateBoard();
            updatePlayerInfo();
        }

        /**
         * Resetea el estado del juego a sus valores iniciales.
         */
        function resetGame() {
            gameState.playerPosition = 1;
            gameState.playerScore = 0;
            gameState.questionsAnswered = 0;
            gameState.gameActive = false;
            gameState.currentQuestion = null;
            gameState.securityLevel = 'Novato';
            gameState.diceRolled = false;
            gameState.diceValue = 0;
            gameState.nextBonus = 1;
            gameState.autoCorrect = false;
            gameState.skipTurn = false;
            
            rollDiceBtn.disabled = true;
            startBtn.disabled = false;
            diceEl.textContent = '?';
            
            // Limpiar tablero si ya existe
            gamePathEl.innerHTML = ''; 
            
            updatePlayerInfo();
            hideModal(questionModal);
            hideModal(cardModal);
            hideModal(gameOverModal);
        }

        /**
         * Genera las casillas del tablero de juego dinámicamente.
         */
        function generateBoard() {
            gamePathEl.innerHTML = ''; // Limpiar cualquier casilla existente
            gameState.boardPathConfig.forEach((cellData, index) => {
                const cell = document.createElement('div');
                const cellNumber = index + 1;
                cell.classList.add('cell', categoryClassMap[cellData.type]);
                cell.dataset.position = cellNumber;
                cell.innerHTML = `<span>${cellData.label}</span>`; 

                // Añadir el token del jugador a la primera casilla
                if (cellNumber === gameState.playerPosition) {
                    gameState.playerToken = document.createElement('div');
                    gameState.playerToken.classList.add('player-token');
                    gameState.playerToken.textContent = 'P'; // Player icon
                    cell.appendChild(gameState.playerToken);
                    cell.classList.add('active');
                }
                gamePathEl.appendChild(cell);
            });
        }

        /**
         * Actualiza la información del jugador en el panel (posición, puntos, nivel).
         */
        function updatePlayerInfo() {
            playerPositionEl.textContent = gameState.playerPosition;
            playerScoreEl.textContent = gameState.playerScore;
            
            const oldLevel = gameState.securityLevel;
            if (gameState.playerScore >= 41) {
                gameState.securityLevel = 'Guardián';
            } else if (gameState.playerScore >= 26) {
                gameState.securityLevel = 'Experto';
            } else if (gameState.playerScore >= 11) {
                gameState.securityLevel = 'Aprendiz';
            } else {
                gameState.securityLevel = 'Novato';
            }

            // Actualizar la clase CSS del nivel de seguridad
            securityLevelEl.className = 'value'; // Reset classes
            securityLevelEl.classList.add(`level-${gameState.securityLevel.toLowerCase()}`);
            securityLevelEl.textContent = gameState.securityLevel;

            if (oldLevel !== gameState.securityLevel && gameState.gameActive) {
                showLevelUpNotification(gameState.securityLevel);
            }
        }

        /**
         * Simula el lanzamiento del dado y mueve al jugador.
         */
        function rollDice() {
            if (!gameState.gameActive || gameState.diceRolled) return;

            rollDiceBtn.disabled = true; // Deshabilitar el botón mientras se lanza el dado

            const rolls = 15; // Número de "tiradas" rápidas para animación
            let currentRoll = 0;
            const rollInterval = setInterval(() => {
                const randomValue = Math.floor(Math.random() * 6) + 1;
                diceEl.textContent = randomValue;
                currentRoll++;
                if (currentRoll >= rolls) {
                    clearInterval(rollInterval);
                    gameState.diceValue = randomValue;
                    gameState.diceRolled = true;
                    movePlayer(gameState.playerPosition + gameState.diceValue);
                }
            }, 100);
        }

        /**
         * Mueve el token del jugador a una nueva posición.
         * @param {number} newPosition - La nueva posición a la que mover el jugador.
         */
        async function movePlayer(newPosition) {
            const currentCell = document.querySelector(`.cell[data-position="${gameState.playerPosition}"]`);
            if (currentCell) {
                currentCell.classList.remove('active');
                if (gameState.playerToken && currentCell.contains(gameState.playerToken)) {
                    currentCell.removeChild(gameState.playerToken);
                }
            }

            // Asegurar que la nueva posición no exceda el máximo
            gameState.playerPosition = Math.min(newPosition, MAX_BOARD_POSITION);
            
            // Animación de movimiento
            for (let i = 0; i < gameState.diceValue; i++) {
                const nextPos = Math.min(currentCell.dataset.position ? parseInt(currentCell.dataset.position) + 1 : 1, MAX_BOARD_POSITION);
                const nextCell = document.querySelector(`.cell[data-position="${nextPos}"]`);
                if (nextCell) {
                    currentCell.classList.remove('active');
                    if (gameState.playerToken && currentCell.contains(gameState.playerToken)) {
                        currentCell.removeChild(gameState.playerToken);
                    }
                    currentCell = nextCell;
                    currentCell.classList.add('active');
                    currentCell.appendChild(gameState.playerToken);
                    playerPositionEl.textContent = nextPos; // Actualizar posición en UI durante animación
                    await new Promise(resolve => setTimeout(resolve, 300)); // Pequeña pausa para animación
                } else {
                    break; // Llegó al final del tablero
                }
            }
            
            const targetCell = document.querySelector(`.cell[data-position="${gameState.playerPosition}"]`);
            if (targetCell) {
                targetCell.classList.add('active');
                targetCell.appendChild(gameState.playerToken);
            }
            updatePlayerInfo(); // Actualizar información final

            // Comprobar si el juego ha terminado
            if (gameState.playerPosition >= MAX_BOARD_POSITION) {
                setTimeout(endGame, 1000);
                return;
            }

            // Si hay un turno saltado por una tarjeta
            if (gameState.skipTurn) {
                gameState.skipTurn = false;
                showCardModal({
                    title: "Turno Perdido",
                    effect: "Has perdido tu turno debido a un 'Bloqueo Temporal'.",
                    type: "penalty"
                });
                cardCloseBtn.onclick = () => {
                    hideModal(cardModal);
                    enableNextTurn();
                };
                return;
            }

            // Manejar la acción de la casilla después del movimiento
            setTimeout(() => handleCellAction(), 500);
        }

        /**
         * Maneja lo que sucede al caer en una casilla específica.
         */
        function handleCellAction() {
            const currentCellType = gameState.boardPathConfig[gameState.playerPosition - 1].type;

            if (currentCellType === 'special') {
                triggerSpecialCard();
            } else if (currentCellType === 'start-end' && gameState.playerPosition === 1) {
                // No hacer nada si es la casilla de inicio
                enableNextTurn();
            } else {
                showRandomQuestion(currentCellType);
            }
        }

        /**
         * Muestra una pregunta aleatoria de la categoría de la casilla.
         * @param {string} category - La categoría de la pregunta (ej. 'contraseñas').
         */
        function showRandomQuestion(category) {
            const questions = questionDatabase[category];
            if (!questions || questions.length === 0) {
                console.warn(`No hay preguntas para la categoría: ${category}`);
                enableNextTurn();
                return;
            }

            const randomIndex = Math.floor(Math.random() * questions.length);
            const questionData = questions[randomIndex];
            gameState.currentQuestion = questionData;

            questionCategoryEl.textContent = questionData.zone;
            // Eliminar clases anteriores y añadir la clase de la categoría
            questionCategoryEl.className = 'question-category'; 
            questionCategoryEl.classList.add(categoryClassMap[category]);

            questionTextEl.textContent = questionData.question;
            answersEl.innerHTML = '';
            explanationEl.style.display = 'none';
            closeQuestionModalBtn.style.display = 'none'; // Ocultar hasta que se responda
            
            scenarioSection.style.display = 'none';
            if (questionData.scenario) {
                scenarioSection.style.display = 'block';
                scenarioContent.textContent = questionData.scenario;
            }

            questionData.options.forEach((option, index) => {
                const button = document.createElement('button');
                button.classList.add('answer-btn');
                button.textContent = option;
                button.onclick = () => checkAnswer(index, questionData.correct, questionData.explanation);
                answersEl.appendChild(button);
            });

            showModal(questionModal);
        }

        /**
         * Comprueba la respuesta del jugador.
         * @param {number} selectedIndex - Índice de la respuesta seleccionada por el jugador.
         * @param {number} correctIndex - Índice de la respuesta correcta.
         * @param {string} explanationText - Texto de explicación de la respuesta.
         */
        function checkAnswer(selectedIndex, correctIndex, explanationText) {
            const answerButtons = answersEl.querySelectorAll('.answer-btn');
            answerButtons.forEach(button => button.disabled = true); // Deshabilitar botones una vez respondido

            let isCorrect = false;

            if (gameState.autoCorrect) {
                isCorrect = true;
                gameState.autoCorrect = false; // Resetear el efecto
            } else {
                isCorrect = (selectedIndex === correctIndex);
            }

            if (isCorrect) {
                answerButtons[correctIndex].classList.add('correct');
                gameState.playerScore += (5 * gameState.nextBonus); // Suma puntos con el multiplicador
                gameState.nextBonus = 1; // Resetea el multiplicador
                updatePlayerInfo();
            } else {
                answerButtons[selectedIndex].classList.add('incorrect');
                answerButtons[correctIndex].classList.add('correct'); // Muestra la correcta
            }

            explanationEl.textContent = explanationText;
            explanationEl.style.display = 'block';
            closeQuestionModalBtn.style.display = 'block'; // Mostrar botón de cerrar
        }

        /**
         * Habilita el lanzamiento del dado para el siguiente turno.
         */
        function enableNextTurn() {
            gameState.diceRolled = false;
            rollDiceBtn.disabled = false;
            diceEl.textContent = '?'; // Reset dice display
        }

        /**
         * Muestra una notificación de subida de nivel.
         * @param {string} level - El nuevo nivel alcanzado.
         */
        function showLevelUpNotification(level) {
            newLevelSpan.textContent = level;
            levelUpNotification.style.display = 'block';
            setTimeout(() => {
                levelUpNotification.style.display = 'none';
            }, 2000); // Duración de la notificación
        }

        /**
         * Activa una tarjeta especial (recompensa o castigo) aleatoriamente.
         */
        function triggerSpecialCard() {
            const cardTypes = ['rewards', 'penalties'];
            const randomTypeIndex = Math.floor(Math.random() * cardTypes.length);
            const chosenType = cardTypes[randomTypeIndex];

            const cards = specialCards[chosenType];
            const randomCardIndex = Math.floor(Math.random() * cards.length);
            const card = cards[randomCardIndex];

            showCardModal(card);
            cardCloseBtn.onclick = () => {
                hideModal(cardModal);
                card.action(); // Ejecutar la acción de la tarjeta
                // Si la acción de la tarjeta NO implica un movimiento (como Advance Rápido o Reinicio),
                // entonces habilitar el siguiente turno aquí. Si implica movimiento, el movimiento
                // llamará a handleCellAction de nuevo o endGame.
                // Aquí usamos un setTimeout para dar tiempo a que la acción se ejecute
                if (!card.effect.includes("casillas") && !card.effect.includes("inicio")) {
                     enableNextTurn();
                }
            };
        }

        /**
         * Muestra el modal de tarjetas especiales.
         * @param {object} cardData - Datos de la tarjeta (título, efecto, tipo).
         */
        function showCardModal(cardData) {
            cardTitleEl.textContent = cardData.title;
            cardEffectEl.textContent = cardData.effect;
            cardEffectEl.className = 'card-effect'; // Reset classes
            cardEffectEl.classList.add(cardData.type === 'bonus' ? 'bonus-card' : 'penalty-card');
            showModal(cardModal);
        }

        /**
         * Finaliza el juego y muestra el modal de resultados.
         */
        function endGame() {
            gameState.gameActive = false;
            rollDiceBtn.disabled = true;
            hideModal(questionModal);
            hideModal(cardModal);

            gameOverTitle.textContent = `¡Misión ${gameState.playerPosition >= MAX_BOARD_POSITION ? 'Completada' : 'Finalizada'}!`;
            gameOverMessage.textContent = gameState.playerPosition >= MAX_BOARD_POSITION 
                ? "¡Has llegado al final del tablero y te has convertido en un Ciber-Guardián experto!"
                : "El juego ha terminado. ¡Puedes intentarlo de nuevo para mejorar tu puntuación!";
            finalScoreSpan.textContent = gameState.playerScore;
            finalLevelSpan.textContent = gameState.securityLevel;

            showModal(gameOverModal);
        }

        // ==================== UTILIDADES DE MODALES ====================

        function showModal(modalElement) {
            modalElement.style.display = 'block';
            setTimeout(() => modalElement.classList.add('active'), 10); // Para transiciones CSS
        }

        function hideModal(modalElement) {
            modalElement.classList.remove('active');
            setTimeout(() => modalElement.style.display = 'none', 300); // Coincidir con la transición
        }

        // ==================== EVENT LISTENERS ====================

        startBtn.addEventListener('click', initGame);
        resetBtn.addEventListener('click', resetGame);
        rollDiceBtn.addEventListener('click', rollDice);
        instructionsBtn.addEventListener('click', () => showModal(instructionsModal));
        closeInstructionsModalBtn.addEventListener('click', () => hideModal(instructionsModal));
        closeQuestionModalBtn.addEventListener('click', () => {
            hideModal(questionModal);
            enableNextTurn();
        });
        restartGameBtn.addEventListener('click', () => {
            hideModal(gameOverModal);
            initGame();
        });

        // Inicializar el juego al cargar la página (solo el tablero y la info, no iniciar la misión)
        document.addEventListener('DOMContentLoaded', () => {
            generateBoard(); // Generar el tablero inicial
            updatePlayerInfo(); // Actualizar la info inicial
        });

    </script>
</body>
</html>
