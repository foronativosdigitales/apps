<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ciber-Guardianes: Aventura Digital Segura</title>
    <style>
        /* ==================== ESTILOS GENERALES ==================== */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a4b 50%, #2d1b69 100%);
            min-height: 100vh;
            color: #333;
            overflow-x: auto;
            position: relative;
        }

        /* Animación de fondo cibernético */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);
            background-size: 50px 50px;
            animation: grid-move 10s linear infinite;
            pointer-events: none;
            z-index: -1;
        }

        @keyframes grid-move {
            0% { transform: translate(0, 0); }
            100% { transform: translate(50px, 50px); }
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
            z-index: 1;
        }

        /* ==================== HEADER ==================== */
        .header {
            text-align: center;
            margin-bottom: 30px;
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 255, 255, 0.3);
            border: 2px solid #00ffff;
        }

        .header h1 {
            color: #1a1a4b;
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 255, 255, 0.3);
        }

        .header p {
            color: #4a5568;
            font-size: 1.1rem;
        }

        /* ==================== PANEL DE INFORMACIÓN ==================== */
        .info-panel {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 30px;
        }

        .info-card {
            background: rgba(255, 255, 255, 0.9);
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 255, 255, 0.2);
            text-align: center;
            flex: 1;
            min-width: 150px;
            border: 1px solid #00ffff;
        }

        .info-card h3 {
            color: #1a1a4b;
            margin-bottom: 5px;
        }

        .info-card .value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #2d1b69;
        }

        /* ==================== TABLERO DE JUEGO ==================== */
        .game-board {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 255, 255, 0.4);
            margin-bottom: 30px;
            border: 2px solid #00ffff;
        }

        .cyber-zones {
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .zone {
            text-align: center;
            padding: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 15px;
            color: white;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transform: translateY(0);
            transition: transform 0.3s ease;
            border: 2px solid #00ffff;
        }

        .zone:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 20px rgba(0, 255, 255, 0.5);
        }

        .board-path {
            display: grid;
            grid-template-columns: repeat(12, 1fr);
            gap: 15px;
            margin-top: 20px;
        }

        .cell {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            cursor: pointer;
            position: relative;
            transition: all 0.3s ease;
            border: 3px solid transparent;
            font-size: 0.9rem;
        }

        .cell:hover {
            transform: scale(1.1);
            box-shadow: 0 5px 20px rgba(0, 255, 255, 0.5);
        }

        /* Colores por categoría */
        .cell.contraseñas {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        }

        .cell.privacidad {
            background: linear-gradient(135deg, #4ecdc4, #44bd87);
        }

        .cell.navegacion {
            background: linear-gradient(135deg, #74b9ff, #0984e3);
        }

        .cell.redes-sociales {
            background: linear-gradient(135deg, #fdcb6e, #e17055);
        }

        .cell.special {
            background: linear-gradient(135deg, #9b59b6, #8e44ad);
            border: 2px dashed #ffffff;
            animation: special-pulse 2s infinite;
        }

        @keyframes special-pulse {
            0%, 100% { 
                transform: scale(1); 
                box-shadow: 0 0 10px #9b59b6;
            }
            50% { 
                transform: scale(1.1); 
                box-shadow: 0 0 20px #9b59b6, 0 0 30px #9b59b6;
            }
        }

        .cell.active {
            border-color: #00ffff;
            animation: cyber-pulse 1.5s infinite;
        }

        @keyframes cyber-pulse {
            0%, 100% { 
                transform: scale(1); 
                box-shadow: 0 0 10px #00ffff;
            }
            50% { 
                transform: scale(1.05); 
                box-shadow: 0 0 20px #00ffff, 0 0 30px #00ffff;
            }
        }

        .player-token {
            position: absolute;
            top: -10px;
            right: -10px;
            width: 25px;
            height: 25px;
            background: #9b59b6;
            border-radius: 50%;
            border: 3px solid #00ffff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            color: white;
            z-index: 10;
            animation: token-glow 2s infinite alternate;
        }

        @keyframes token-glow {
            0% { box-shadow: 0 0 5px #00ffff; }
            100% { box-shadow: 0 0 15px #00ffff, 0 0 25px #00ffff; }
        }

        /* ==================== MODAL DE PREGUNTAS ==================== */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            padding: 30px;
            border-radius: 20px;
            max-width: 600px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 255, 255, 0.5);
            border: 2px solid #00ffff;
        }

        .question-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .question-category {
            display: inline-block;
            padding: 8px 20px;
            border-radius: 20px;
            color: white;
            font-weight: bold;
            margin-bottom: 15px;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .question-text {
            font-size: 1.2rem;
            margin-bottom: 25px;
            line-height: 1.6;
            text-align: center;
            color: #1a1a4b;
        }

        .answers {
            display: grid;
            gap: 15px;
        }

        .answer-btn {
            padding: 15px 20px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
            text-align: left;
            color: #1a1a4b;
        }

        .answer-btn:hover {
            border-color: #00ffff;
            background: #f0f8ff;
            transform: translateX(5px);
            box-shadow: 0 3px 10px rgba(0, 255, 255, 0.3);
        }

        .answer-btn.correct {
            background: #48bb78;
            color: white;
            border-color: #48bb78;
        }

        .answer-btn.incorrect {
            background: #f56565;
            color: white;
            border-color: #f56565;
        }

        /* ==================== ELEMENTOS INTERACTIVOS ==================== */
        .scenario-viewer {
            background: #f7fafc;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
            border: 2px solid #00ffff;
        }

        .scenario-content {
            font-size: 1.1rem;
            line-height: 1.6;
            color: #1a1a4b;
            margin-bottom: 15px;
        }

        .scenario-tip {
            background: rgba(0, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #00ffff;
            margin-top: 15px;
        }

        /* ==================== LEYENDA ==================== */
        .legend {
            display: flex;
            justify-content: center;
            gap: 30px;
            flex-wrap: wrap;
            margin-top: 20px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 5px;
            border: 1px solid #00ffff;
        }

        .legend-color.special {
            background: linear-gradient(135deg, #9b59b6, #8e44ad);
        }

        /* ==================== CONTROLES ==================== */
        .controls {
            text-align: center;
            margin-top: 30px;
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 0 10px;
            border: 2px solid transparent;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: #00ffff;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #5a6fd8, #6b42a1);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 255, 0.4);
        }

        .btn-secondary {
            background: #e2e8f0;
            color: #1a1a4b;
            border-color: #00ffff;
        }

        .btn-secondary:hover {
            background: #cbd5e0;
            box-shadow: 0 3px 10px rgba(0, 255, 255, 0.3);
        }

        /* ==================== RESPONSIVE DESIGN ==================== */
        @media (max-width: 768px) {
            .cyber-zones {
                grid-template-columns: repeat(3, 1fr);
                gap: 10px;
            }

            .board-path {
                grid-template-columns: repeat(8, 1fr);
                gap: 10px;
            }

            .cell {
                width: 45px;
                height: 45px;
                font-size: 0.8rem;
            }

            .header h1 {
                font-size: 2rem;
            }

            .info-panel {
                flex-direction: column;
            }

            .legend {
                flex-direction: column;
                align-items: center;
                gap: 15px;
            }

            .modal-content {
                padding: 20px;
                margin: 20px;
            }
        }

        @media (max-width: 480px) {
            .cyber-zones {
                grid-template-columns: repeat(2, 1fr);
            }

            .board-path {
                grid-template-columns: repeat(6, 1fr);
            }

            .cell {
                width: 40px;
                height: 40px;
                font-size: 0.7rem;
            }
        }

        /* ==================== EFECTOS ESPECIALES ==================== */
        .security-level {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 15px;
            font-size: 0.9rem;
            font-weight: bold;
            margin-left: 10px;
        }

        .level-beginner { background: #48bb78; color: white; }
        .level-intermediate { background: #ed8936; color: white; }
        .level-advanced { background: #e53e3e; color: white; }

        .cyber-warning {
            background: rgba(255, 107, 107, 0.1);
            border: 2px solid #ff6b6b;
            border-radius: 10px;
            padding: 15px;
            margin: 15px 0;
            color: #c53030;
            font-weight: bold;
        }

        .cyber-tip {
            background: rgba(72, 187, 120, 0.1);
            border: 2px solid #48bb78;
            border-radius: 10px;
            padding: 15px;
            margin: 15px 0;
            color: #2f855a;
            font-weight: bold;
        }

        /* Nuevos estilos para funcionalidad */
        .instructions-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .instructions-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            padding: 30px;
            border-radius: 20px;
            max-width: 600px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 255, 255, 0.5);
            border: 2px solid #00ffff;
        }

        .close-btn {
            position: absolute;
            top: 15px;
            right: 15px;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #1a1a4b;
        }

        .explanation {
            background: rgba(0, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-top: 15px;
            border-left: 4px solid #00ffff;
            display: none;
        }

        .level-up {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.95);
            padding: 15px 30px;
            border-radius: 50px;
            box-shadow: 0 5px 20px rgba(0, 255, 255, 0.5);
            border: 2px solid #00ffff;
            z-index: 1001;
            display: none;
            animation: level-up-anim 2s forwards;
        }

        @keyframes level-up-anim {
            0% { top: -50px; opacity: 0; }
            20% { top: 20px; opacity: 1; }
            80% { top: 20px; opacity: 1; }
            100% { top: -50px; opacity: 0; }
        }

        /* Nuevos estilos para el dado y tarjetas */
        .dice-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 20px;
        }

        .dice {
            width: 80px;
            height: 80px;
            background: white;
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            font-weight: bold;
            margin: 10px 0;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            border: 3px solid #00ffff;
            animation: dice-roll 0.5s ease-out;
        }

        @keyframes dice-roll {
            0% { transform: rotate(0deg) scale(1); }
            50% { transform: rotate(180deg) scale(1.2); }
            100% { transform: rotate(360deg) scale(1); }
        }

        .dice-btn {
            padding: 10px 25px;
            background: linear-gradient(135deg, #fdcb6e, #e17055);
            color: white;
            border: none;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 10px;
        }

        .dice-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 255, 0.4);
        }

        .dice-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .card-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .card-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            padding: 30px;
            border-radius: 20px;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 255, 255, 0.5);
            border: 2px solid #00ffff;
            text-align: center;
        }

        .card-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: #1a1a4b;
        }

        .card-effect {
            font-size: 1.2rem;
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 10px;
        }

        .bonus-card {
            background: rgba(72, 187, 120, 0.2);
            border: 2px solid #48bb78;
            color: #2f855a;
        }

        .penalty-card {
            background: rgba(245, 101, 101, 0.2);
            border: 2px solid #f56565;
            color: #c53030;
        }

        .card-close-btn {
            padding: 10px 25px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .card-close-btn:hover {
            background: #5a6fd8;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🛡️ CIBER-GUARDIANES 🛡️</h1>
            <p>Aventura por el mundo digital seguro - ¡Aprende a protegerte online!</p>
        </div>

        <!-- Panel de información -->
        <div class="info-panel">
            <div class="info-card">
                <h3>👤 Guardián</h3>
                <div class="value" id="player-name">Ciber-Héroe</div>
            </div>
            <div class="info-card">
                <h3>📍 Posición</h3>
                <div class="value" id="player-position">1</div>
            </div>
            <div class="info-card">
                <h3>🏆 Puntos</h3>
                <div class="value" id="player-score">0</div>
            </div>
            <div class="info-card">
                <h3>🛡️ Nivel</h3>
                <div class="value" id="security-level">Novato</div>
            </div>
        </div>

        <!-- Tablero de juego -->
        <div class="game-board">
            <!-- Contenedor del dado -->
            <div class="dice-container" id="dice-container">
                <div class="dice" id="dice">?</div>
                <button class="dice-btn" id="roll-dice-btn">🎲 Lanzar Dado</button>
            </div>

            <!-- Zonas cibernéticas -->
            <div class="cyber-zones">
                <div class="zone">🔐 Contraseñas<br>Seguras</div>
                <div class="zone">👥 Privacidad<br>Personal</div>
                <div class="zone">🌐 Navegación<br>Segura</div>
                <div class="zone">📱 Redes<br>Sociales</div>
                <div class="zone">📧 Email &<br>Phishing</div>
                <div class="zone">🎮 Gaming<br>Responsable</div>
            </div>

            <!-- Tablero de casillas -->
            <div class="board-path" id="game-path">
                <!-- Las casillas se generarán dinámicamente con JavaScript -->
            </div>

            <!-- Leyenda -->
            <div class="legend">
                <div class="legend-item">
                    <div class="legend-color contraseñas"></div>
                    <span>🔐 Contraseñas</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color privacidad"></div>
                    <span>👥 Privacidad</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color navegacion"></div>
                    <span>🌐 Navegación</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color redes-sociales"></div>
                    <span>📱 Redes Sociales</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color special"></div>
                    <span>✨ Casilla Especial</span>
                </div>
            </div>
        </div>

        <!-- Controles -->
        <div class="controls">
            <button class="btn btn-primary" id="start-btn">🚀 Iniciar Misión</button>
            <button class="btn btn-secondary" id="reset-btn">🔄 Reiniciar</button>
            <button class="btn btn-secondary" id="instructions-btn">❓ Manual del Guardián</button>
        </div>
    </div>

    <!-- Modal para preguntas -->
    <div id="question-modal" class="modal">
        <div class="modal-content">
            <button class="close-btn" id="close-question-modal">×</button>
            <div class="question-header">
                <div id="question-category" class="question-category"></div>
                <div id="question-zone"></div>
            </div>
            <div id="question-text" class="question-text"></div>
            <div id="scenario-section" class="scenario-viewer" style="display: none;">
                <div id="scenario-content" class="scenario-content"></div>
                <div class="scenario-tip">
                    💡 <strong>Piensa bien:</strong> ¿Cuál sería la acción más segura?
                </div>
            </div>
            <div id="answers" class="answers"></div>
            <div id="explanation" class="explanation"></div>
        </div>
    </div>

    <!-- Modal de instrucciones -->
    <div id="instructions-modal" class="instructions-modal">
        <div class="instructions-content">
            <button class="close-btn" id="close-instructions-modal">×</button>
            <h2 style="text-align: center; margin-bottom: 20px; color: #1a1a4b;">📜 Manual del Guardián</h2>
            <div style="margin-bottom: 15px;">
                <h3>🎯 Objetivo del juego</h3>
                <p>Recorre el tablero respondiendo preguntas sobre seguridad digital para convertirte en un auténtico Ciber-Guardián.</p>
            </div>
            <div style="margin-bottom: 15px;">
                <h3>📝 Cómo jugar</h3>
                <ol>
                    <li>Haz clic en "Iniciar Misión" para comenzar</li>
                    <li>Lanza el dado para avanzar en el tablero</li>
                    <li>Responde correctamente a las preguntas para ganar puntos</li>
                    <li>Alcanza el nivel máximo de seguridad para ganar</li>
                    <li>Puedes encontrar tarjetas de recompensa o castigo en algunas casillas</li>
                </ol>
            </div>
            <div>
                <h3>🏆 Sistema de puntos</h3>
                <ul>
                    <li>Respuesta correcta: +5 puntos</li>
                    <li>Respuesta incorrecta: +0 puntos</li>
                    <li>Niveles: Novato (0-10), Aprendiz (11-20), Experto (21-30), Guardián (31+)</li>
                </ul>
            </div>
            <div class="cyber-tip" style="margin-top: 20px;">
                💡 Cada pregunta es una oportunidad para aprender sobre cómo protegerte en el mundo digital
            </div>
        </div>
    </div>

    <!-- Modal de tarjetas -->
    <div id="card-modal" class="card-modal">
        <div class="card-content">
            <h2 class="card-title" id="card-title">¡Tarjeta Especial!</h2>
            <div class="card-effect" id="card-effect">
                Has encontrado una tarjeta especial con efectos en tu juego.
            </div>
            <button class="card-close-btn" id="card-close-btn">Continuar</button>
        </div>
    </div>

    <!-- Notificación de nivel -->
    <div id="level-up" class="level-up">
        ¡Felicidades! Has alcanzado el nivel: <span id="new-level">Experto</span>
    </div>

    <script>
        // ==================== VARIABLES GLOBALES ====================
        let gameState = {
            playerPosition: 1,
            playerScore: 0,
            questionsAnswered: 0,
            gameActive: false,
            currentQuestion: null,
            securityLevel: 'Novato',
            diceRolled: false,
            diceValue: 0
        };

        // Tarjetas especiales (recompensas y castigos)
        const specialCards = {
            rewards: [
                { 
                    title: "¡Bonus x2!", 
                    effect: "Obtienes el doble de puntos en tu próxima respuesta correcta", 
                    type: "bonus",
                    action: function() {
                        gameState.nextBonus = 2;
                    }
                },
                { 
                    title: "¡Bonus x3!", 
                    effect: "Obtienes el triple de puntos en tu próxima respuesta correcta", 
                    type: "bonus",
                    action: function() {
                        gameState.nextBonus = 3;
                    }
                },
                { 
                    title: "¡Avance Rápido!", 
                    effect: "Avanzas 5 casillas adicionales", 
                    type: "bonus",
                    action: function() {
                        movePlayer(Math.min(gameState.playerPosition + 5, 60));
                    }
                },
                { 
                    title: "¡Respuesta Segura!", 
                    effect: "Tu próxima respuesta se considera correcta automáticamente", 
                    type: "bonus",
                    action: function() {
                        gameState.autoCorrect = true;
                    }
                }
            ],
            penalties: [
                { 
                    title: "¡Virus Detectado!", 
                    effect: "Retrocedes 3 casillas", 
                    type: "penalty",
                    action: function() {
                        movePlayer(Math.max(gameState.playerPosition - 3, 1));
                    }
                },
                { 
                    title: "¡Reinicio del Sistema!", 
                    effect: "Vuelves al inicio del tablero", 
                    type: "penalty",
                    action: function() {
                        movePlayer(1);
                    }
                },
                { 
                    title: "¡Pérdida de Datos!", 
                    effect: "Pierdes 5 puntos", 
                    type: "penalty",
                    action: function() {
                        gameState.playerScore = Math.max(gameState.playerScore - 5, 0);
                        updatePlayerInfo();
                    }
                },
                { 
                    title: "¡Bloqueo Temporal!", 
                    effect: "Pierdes tu próximo turno", 
                    type: "penalty",
                    action: function() {
                        gameState.skipTurn = true;
                    }
                }
            ]
        };

        // ==================== BASE DE DATOS DE PREGUNTAS ====================
        const questionDatabase = {
            // CONTRASEÑAS SEGURAS (Rojo)
            contraseñas: [
                {
                    zone: "Contraseñas Seguras",
                    question: "¿Cuál de estas contraseñas es MÁS segura?",
                    options: ["123456", "MiNombre2024", "P@ssw0rd!2024#Segura", "password"],
                    correct: 2,
                    explanation: "Una contraseña segura debe tener al menos 12 caracteres, mayúsculas, minúsculas, números y símbolos.",
                    level: "beginner"
                },
                {
                    zone: "Contraseñas Seguras",
                    question: "¿Qué debes hacer si sospechas que alguien sabe tu contraseña?",
                    options: ["Ignorarlo, no pasa nada", "Cambiarla inmediatamente", "Contárselo a mis amigos", "Usar la misma en más sitios"],
                    correct: 1,
                    explanation: "Si crees que tu contraseña está comprometida, cámbiala de inmediato para proteger tus cuentas.",
                    level: "beginner"
                },
                {
                    zone: "Contraseñas Seguras",
                    question: "¿Es seguro usar la misma contraseña para todas mis cuentas?",
                    options: ["Sí, es más fácil recordarla", "No, si la descubren acceden a todo", "Solo para redes sociales", "Depende de la contraseña"],
                    correct: 1,
                    explanation: "Usar la misma contraseña en múltiples sitios es muy peligroso. Si la descubren, tendrán acceso a todas tus cuentas.",
                    level: "intermediate"
                },
                {
                    zone: "Contraseñas Seguras",
                    question: "¿Qué es un gestor de contraseñas?",
                    options: ["Un juego de ordenador", "Un programa que guarda contraseñas de forma segura", "Una red social", "Un tipo de virus"],
                    correct: 1,
                    explanation: "Un gestor de contraseñas almacena todas tus contraseñas de forma segura y te ayuda a crear contraseñas únicas.",
                    level: "intermediate"
                }
            ],

            // PRIVACIDAD PERSONAL (Verde)  
            privacidad: [
                {
                    zone: "Privacidad Personal",
                    question: "¿Qué información personal NO deberías compartir online con desconocidos?",
                    options: ["Tu color favorito", "Tu dirección de casa", "Tu comida preferida", "Tu serie favorita"],
                    correct: 1,
                    explanation: "Nunca compartas información personal como tu dirección, teléfono, o dónde estudias con personas que no conoces.",
                    level: "beginner"
                },
                {
                    zone: "Privacidad Personal",
                    question: "Si alguien que no conoces te pide tu número de teléfono en internet, ¿qué haces?",
                    options: ["Se lo doy si parece simpático", "No se lo doy y se lo cuento a un adulto", "Le doy un número falso", "Le pido el suyo primero"],
                    correct: 1,
                    explanation: "Nunca des tu información personal a desconocidos online. Siempre habla con un adulto de confianza.",
                    level: "beginner",
                    scenario: "Un chico que dice tener tu edad te escribe por primera vez y te pide tu número para 'ser mejores amigos'."
                },
                {
                    zone: "Privacidad Personal",
                    question: "¿Qué son los datos personales?",
                    options: ["Solo mi nombre completo", "Información que me identifica como persona", "Solo mis fotos", "Solo mi edad"],
                    correct: 1,
                    explanation: "Los datos personales incluyen tu nombre, dirección, teléfono, fotos, ubicación y cualquier información que te identifique.",
                    level: "intermediate"
                },
                {
                    zone: "Privacidad Personal",
                    question: "¿Por qué es importante leer la configuración de privacidad de las apps?",
                    options: ["No es importante", "Para saber qué información comparten", "Solo si soy mayor de edad", "Para ganar puntos"],
                    correct: 1,
                    explanation: "La configuración de privacidad te permite controlar qué información tuya pueden ver y usar otras personas o empresas.",
                    level: "intermediate"
                }
            ],

            // NAVEGACIÓN SEGURA (Azul)
            navegacion: [
                {
                    zone: "Navegación Segura",
                    question: "¿Cómo puedes saber si una página web es segura?",
                    options: ["Si es bonita", "Si tiene un candado 🔒 y https://", "Si tiene muchos anuncios", "Si aparece primero en Google"],
                    correct: 1,
                    explanation: "El candado y el 'https://' en la URL indican que la conexión es segura y cifrada.",
                    level: "beginner"
                },
                {
                    zone: "Navegación Segura",
                    question: "¿Qué haces si recibes un pop-up que dice '¡Tu ordenador está infectado!'?",
                    options: ["Hago clic para solucionarlo", "Cierro la ventana sin hacer clic", "Apago el ordenador", "Llamo a mis amigos"],
                    correct: 1,
                    explanation: "Muchos anuncios usan mensajes falsos de virus para asustarte. Nunca hagas clic en ellos.",
                    level: "beginner",
                    scenario: "Estás navegando y de repente aparece una ventana que dice '¡ALERTA! ¡Virus detectado! Haz clic aquí para limpiar tu PC'."
                },
                {
                    zone: "Navegación Segura",
                    question: "¿Qué es una VPN?",
                    options: ["Un tipo de virus", "Una red privada virtual que protege tu conexión", "Una plataforma de juegos", "Un programa de edición"],
                    correct: 1,
                    explanation: "Una VPN cifra tu conexión a internet y protege tu privacidad online.",
                    level: "intermediate"
                },
                {
                    zone: "Navegación Segura",
                    question: "¿Por qué es importante actualizar tu navegador?",
                    options: ["Para tener las últimas funciones", "Para parchear vulnerabilidades de seguridad", "Solo si quiero cambiar el tema", "No es importante"],
                    correct: 1,
                    explanation: "Las actualizaciones incluyen parches de seguridad que protegen contra nuevas amenazas.",
                    level: "intermediate"
                }
            ],

            // REDES SOCIALES (Naranja)
            "redes-sociales": [
                {
                    zone: "Redes Sociales",
                    question: "¿Qué información NO es segura compartir en redes sociales?",
                    options: ["Tu ubicación actual", "Tu libro favorito", "Tu opinión sobre una película", "Tu deporte favorito"],
                    correct: 0,
                    explanation: "Compartir tu ubicación en tiempo real puede poner en riesgo tu seguridad física.",
                    level: "beginner"
                },
                {
                    zone: "Redes Sociales",
                    question: "¿Qué haces si alguien que no conoces te pide que te hagas amigo suyo?",
                    options: ["Acepto la solicitud", "Pregunto quién es primero", "Lo rechazo e informo si es sospechoso", "Lo bloqueo inmediatamente"],
                    correct: 2,
                    explanation: "Solo acepta solicitudes de personas que conoces. Si es sospechoso, rechaza e informa.",
                    level: "beginner",
                    scenario: "Recibes una solicitud de amistad de alguien con una foto atractiva pero que no conoces y no tienes amigos en común."
                },
                {
                    zone: "Redes Sociales",
                    question: "¿Qué significa 'phishing' en redes sociales?",
                    options: ["Un tipo de pesca", "Publicar muchas fotos", "Engañar para obtener información personal", "Una función de privacidad"],
                    correct: 2,
                    explanation: "El phishing es un intento de obtener información confidencial haciéndose pasar por una entidad confiable.",
                    level: "intermediate"
                },
                {
                    zone: "Redes Sociales",
                    question: "¿Por qué es importante revisar la configuración de privacidad periódicamente?",
                    options: ["Porque las redes cambian sus políticas", "Para tener más seguidores", "Solo cuando creo una cuenta", "No es necesario"],
                    correct: 0,
                    explanation: "Las redes sociales actualizan frecuentemente sus configuraciones de privacidad.",
                    level: "intermediate"
                }
            ]
        };

        // ==================== INICIALIZACIÓN DEL JUEGO ====================
        document.addEventListener('DOMContentLoaded', function() {
            // Elementos del DOM
            const rollDiceBtn = document.getElementById('roll-dice-btn');
            const startBtn = document.getElementById('start-btn');
            const resetBtn = document.getElementById('reset-btn');
            const instructionsBtn = document.getElementById('instructions-btn');
            const closeInstructionsBtn = document.getElementById('close-instructions-modal');
            const closeQuestionBtn = document.getElementById('close-question-modal');
            const cardCloseBtn = document.getElementById('card-close-btn');
            const dice = document.getElementById('dice');
            
            // Event listeners
            startBtn.addEventListener('click', startGame);
            resetBtn.addEventListener('click', resetGame);
            rollDiceBtn.addEventListener('click', rollDice);
            instructionsBtn.addEventListener('click', showInstructions);
            closeInstructionsBtn.addEventListener('click', hideInstructions);
            closeQuestionBtn.addEventListener('click', closeQuestionModal);
            cardCloseBtn.addEventListener('click', closeCardModal);
            
            // Generar tablero
            generateGameBoard();
        });

        // Generar el tablero con casillas
        function generateGameBoard() {
            const gamePath = document.getElementById('game-path');
            gamePath.innerHTML = '';
            
            const categories = ['contraseñas', 'privacidad', 'navegacion', 'redes-sociales'];
            
            // Crear 60 casillas
            for (let i = 1; i <= 60; i++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.setAttribute('data-position', i);
                
                // Asignar categoría
                const categoryIndex = (i - 1) % categories.length;
                const category = categories[categoryIndex];
                cell.classList.add(category);
                
                // Añadir número de casilla
                cell.textContent = i;
                
                // Hacer algunas casillas especiales
                if (i % 7 === 0 || i === 1 || i === 60) {
                    cell.classList.add('special');
                    cell.innerHTML = '✨';
                }
                
                gamePath.appendChild(cell);
            }
            
            // Añadir token del jugador
            updatePlayerPosition();
        }

        // Actualizar posición del jugador
        function updatePlayerPosition() {
            // Eliminar token anterior
            const oldToken = document.querySelector('.player-token');
            if (oldToken) oldToken.remove();
            
            // Añadir nuevo token
            const currentCell = document.querySelector(`.cell[data-position="${gameState.playerPosition}"]`);
            if (currentCell) {
                const token = document.createElement('div');
                token.classList.add('player-token');
                token.textContent = '👤';
                currentCell.appendChild(token);
                
                // Resaltar celda actual
                document.querySelectorAll('.cell').forEach(cell => cell.classList.remove('active'));
                currentCell.classList.add('active');
            }
            
            // Actualizar panel de información
            document.getElementById('player-position').textContent = gameState.playerPosition;
        }

        // Iniciar juego
        function startGame() {
            gameState.gameActive = true;
            document.getElementById('roll-dice-btn').disabled = false;
            document.getElementById('start-btn').disabled = true;
            alert('¡Misión iniciada! Lanza el dado para comenzar tu aventura digital.');
        }

        // Reiniciar juego
        function resetGame() {
            gameState = {
                playerPosition: 1,
                playerScore: 0,
                questionsAnswered: 0,
                gameActive: true,
                currentQuestion: null,
                securityLevel: 'Novato',
                diceRolled: false,
                diceValue: 0
            };
            
            updatePlayerInfo();
            updatePlayerPosition();
            document.getElementById('roll-dice-btn').disabled = false;
            document.getElementById('start-btn').disabled = true;
            
            alert('¡Juego reiniciado! Comienza una nueva aventura cibernética.');
        }

        // Actualizar información del jugador
        function updatePlayerInfo() {
            document.getElementById('player-position').textContent = gameState.playerPosition;
            document.getElementById('player-score').textContent = gameState.playerScore;
            
            // Actualizar nivel de seguridad
            let level = 'Novato';
            if (gameState.playerScore >= 30) level = 'Guardián';
            else if (gameState.playerScore >= 20) level = 'Experto';
            else if (gameState.playerScore >= 10) level = 'Aprendiz';
            
            if (level !== gameState.securityLevel) {
                gameState.securityLevel = level;
                document.getElementById('security-level').textContent = level;
                
                // Mostrar notificación de nivel
                const levelUp = document.getElementById('level-up');
                const newLevelSpan = document.getElementById('new-level');
                newLevelSpan.textContent = level;
                levelUp.style.display = 'block';
                
                // Ocultar después de la animación
                setTimeout(() => {
                    levelUp.style.display = 'none';
                }, 2000);
            }
        }

        // Lanzar dado
        function rollDice() {
            if (!gameState.gameActive) {
                alert('Primero debes iniciar la misión!');
                return;
            }
            
            const dice = document.getElementById('dice');
            const rollBtn = document.getElementById('roll-dice-btn');
            
            // Deshabilitar botón mientras se lanza
            rollBtn.disabled = true;
            dice.style.animation = 'dice-roll 0.5s ease-out';
            
            // Simular lanzamiento
            setTimeout(() => {
                const roll = Math.floor(Math.random() * 6) + 1;
                gameState.diceValue = roll;
                dice.textContent = roll;
                
                // Mover jugador
                movePlayer(gameState.playerPosition + roll);
                
                // Habilitar botón después de 1 segundo
                setTimeout(() => {
                    rollBtn.disabled = false;
                }, 1000);
            }, 500);
        }

        // Mover jugador a una nueva posición
        function movePlayer(newPosition) {
            if (newPosition > 60) {
                newPosition = 60; // No pasar de la última casilla
            }
            
            gameState.playerPosition = newPosition;
            updatePlayerPosition();
            
            // Comprobar si es una casilla especial
            const currentCell = document.querySelector(`.cell[data-position="${newPosition}"]`);
            if (currentCell.classList.contains('special')) {
                showSpecialCard();
            } else {
                // Mostrar pregunta
                const categories = ['contraseñas', 'privacidad', 'navegacion', 'redes-sociales'];
                const categoryIndex = (newPosition - 1) % categories.length;
                const category = categories[categoryIndex];
                showQuestion(category);
            }
        }

        // Mostrar tarjeta especial
        function showSpecialCard() {
            // Determinar si es recompensa o castigo (75% recompensa, 25% castigo)
            const isReward = Math.random() < 0.75;
            const cardType = isReward ? 'rewards' : 'penalties';
            const cards = specialCards[cardType];
            
            // Seleccionar una carta aleatoria
            const randomCard = cards[Math.floor(Math.random() * cards.length)];
            
            // Aplicar efecto de la carta
            randomCard.action();
            
            // Actualizar información del jugador
            updatePlayerInfo();
            
            // Mostrar modal
            const cardModal = document.getElementById('card-modal');
            const cardTitle = document.getElementById('card-title');
            const cardEffect = document.getElementById('card-effect');
            
            cardTitle.textContent = randomCard.title;
            cardEffect.textContent = randomCard.effect;
            cardEffect.className = 'card-effect';
            cardEffect.classList.add(randomCard.type === 'bonus' ? 'bonus-card' : 'penalty-card');
            
            cardModal.style.display = 'block';
        }

        // Mostrar pregunta
        function showQuestion(category) {
            const questions = questionDatabase[category];
            const randomQuestion = questions[Math.floor(Math.random() * questions.length)];
            gameState.currentQuestion = randomQuestion;
            
            const modal = document.getElementById('question-modal');
            const questionCategory = document.getElementById('question-category');
            const questionZone = document.getElementById('question-zone');
            const questionText = document.getElementById('question-text');
            const answers = document.getElementById('answers');
            const scenarioSection = document.getElementById('scenario-section');
            const scenarioContent = document.getElementById('scenario-content');
            
            // Configurar categoría y zona
            questionCategory.textContent = category.charAt(0).toUpperCase() + category.slice(1);
            questionCategory.style.backgroundColor = getCategoryColor(category);
            questionZone.textContent = `Zona: ${randomQuestion.zone}`;
            
            // Configurar pregunta
            questionText.textContent = randomQuestion.question;
            
            // Configurar escenario si existe
            if (randomQuestion.scenario) {
                scenarioSection.style.display = 'block';
                scenarioContent.textContent = randomQuestion.scenario;
            } else {
                scenarioSection.style.display = 'none';
            }
            
            // Configurar respuestas
            answers.innerHTML = '';
            randomQuestion.options.forEach((option, index) => {
                const button = document.createElement('button');
                button.classList.add('answer-btn');
                button.textContent = option;
                button.addEventListener('click', () => checkAnswer(index));
                answers.appendChild(button);
            });
            
            // Mostrar modal
            modal.style.display = 'block';
        }

        // Obtener color de categoría
        function getCategoryColor(category) {
            const colors = {
                'contraseñas': '#ff6b6b',
                'privacidad': '#4ecdc4',
                'navegacion': '#74b9ff',
                'redes-sociales': '#fdcb6e'
            };
            return colors[category] || '#9b59b6';
        }

        // Comprobar respuesta
        function checkAnswer(selectedIndex) {
            const correctIndex = gameState.currentQuestion.correct;
            const answerButtons = document.querySelectorAll('.answer-btn');
            const explanation = document.getElementById('explanation');
            
            // Marcar respuestas
            answerButtons.forEach((button, index) => {
                button.disabled = true;
                if (index === correctIndex) {
                    button.classList.add('correct');
                } else if (index === selectedIndex) {
                    button.classList.add('incorrect');
                }
            });
            
            // Mostrar explicación
            explanation.textContent = gameState.currentQuestion.explanation;
            explanation.style.display = 'block';
            
            // Actualizar puntuación si es correcta
            if (selectedIndex === correctIndex) {
                gameState.playerScore += 5;
                gameState.questionsAnswered++;
                updatePlayerInfo();
            }
            
            // Habilitar dado después de 3 segundos
            setTimeout(() => {
                closeQuestionModal();
            }, 3000);
        }

        // Cerrar modal de pregunta
        function closeQuestionModal() {
            const modal = document.getElementById('question-modal');
            modal.style.display = 'none';
        }

        // Cerrar modal de tarjeta
        function closeCardModal() {
            const modal = document.getElementById('card-modal');
            modal.style.display = 'none';
        }

        // Mostrar instrucciones
        function showInstructions() {
            const modal = document.getElementById('instructions-modal');
            modal.style.display = 'block';
        }

        // Ocultar instrucciones
        function hideInstructions() {
            const modal = document.getElementById('instructions-modal');
            modal.style.display = 'none';
        }
    </script>
</body>
</html>
